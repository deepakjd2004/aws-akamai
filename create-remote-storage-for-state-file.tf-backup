terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
    akamai = {
      source = "akamai/akamai"
      version = "1.9.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
  # their is no need to specify access credentials as we are setting them as env variable in the shell
}

# Create a VPC
resource "aws_vpc" "app_vpc" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "akamai-vpc"
  }
}

# Create an Internet gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.app_vpc.id

  tags = {
    Name = "akamai_vpc_igw"
  }
}

# Create a Public Subnet
resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.app_vpc.id
  cidr_block        = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone = "us-west-2a"

  tags = {
    Name = "akamai_public_subnet"
  }
}

# Create a Route table

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.app_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "akamai_public_rt"
  }
}

#Associate route table

resource "aws_route_table_association" "public_rt_asso" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_rt.id
}


#################
# VNET
#################
resource "azurerm_virtual_network" "vnet" {
  name                = "${var.prefix}-network"
  resource_group_name = "${azurerm_resource_group.rg.name}"
  location            = "${azurerm_resource_group.rg.location}"
  address_space       = [var.vnet_cidr]
}
#################
# SUBNET
#################
resource "azurerm_subnet" "sub" {
  name                 = "terraform_subnet"
  virtual_network_name = "${azurerm_virtual_network.vnet.name}"
  resource_group_name  = "${azurerm_resource_group.rg.name}"
  address_prefixes     = [var.subnet_cidr]
}

######################
# Network Security Group
######################
resource "azurerm_network_security_group" "nsg" {
  name                = "${var.prefix}-nsg"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "Egress"
    priority                   = 100
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
security_rule {
    name                       = "Inbound HTTP access"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "tcp"
    source_port_range          = "*"
    destination_port_ranges     = ["22","80","443","3389"]
    source_address_prefix      = "*"
    destination_address_prefix = "*"
    description                = "RDP-HTTP-HTTPS ingress trafic"
  }
  security_rule {
      name                       = "ICMP"
      priority                   = 200
      direction                  = "Inbound"
      access                     = "Allow"
      protocol                   = "icmp"
      source_port_range          = "*"
      destination_port_range     = "*"
      source_address_prefix      = "*"
      destination_address_prefix = "*"
      description                = "ICMP access"
    }

tags = {
    Name = "SSH ,HTTP, and HTTPS"
  }
    timeouts {}
}

# NSG to Subnet Association

resource "azurerm_subnet_network_security_group_association" "nsg_sub" {
  subnet_id                 = azurerm_subnet.sub.id
  network_security_group_id = azurerm_network_security_group.nsg.id
}

# Creating NIC
resource "azurerm_network_interface" "nic" {
  name                = "${var.prefix}-nic"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "terraform_subconfiguration"
    subnet_id                     = azurerm_subnet.sub.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.pip.id
  }
}

# Creating Public IP
resource "azurerm_public_ip" "pip" {
  name                = "TerraformPublicIp"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  allocation_method   = "Dynamic"

  tags = {
    app = "Static WebSite Ip "
  }
}

# Creating NSG Association
resource "azurerm_network_interface_security_group_association" "pip_nsg" {
  network_interface_id      = azurerm_network_interface.nic.id
  network_security_group_id = azurerm_network_security_group.nsg.id
}

# Provision VM
resource "azurerm_linux_virtual_machine" "vm" {
  name                  = "${var.prefix}-vm"
  location              = azurerm_resource_group.rg.location
  resource_group_name   = azurerm_resource_group.rg.name
  network_interface_ids = [azurerm_network_interface.nic.id]
  size               = var.vm_size
  computer_name  = "terraform-host"
  admin_username = var.os_publisher[var.OS].admin
  disable_password_authentication = true
  provision_vm_agent = true
  custom_data    = base64encode ("${file(var.user_data)}")

admin_ssh_key {
    username = var.os_publisher[var.OS].admin
    public_key = file("~/.ssh/id_rsa.pub")
  }
  ######################
  # IMAGE
  ######################
   source_image_reference {
      publisher = var.os_publisher[var.OS].publisher
      offer     = var.os_publisher[var.OS].offer
      sku       = var.os_publisher[var.OS].sku
      version   = "latest"
    }
    # Uncomment this line to delete the OS disk automatically when deleting the VM
    #delete_os_disk_on_termination = true
    # Uncomment this line to delete the data disks automatically when deleting the VM
    # delete_data_disks_on_termination = true
  ######################
  # VOLUME
  ######################
    os_disk {
      caching              = "ReadWrite"
      storage_account_type = "Standard_LRS"
      disk_size_gb         = var.osdisk_size
    }

    tags = {
      environment = "demo"
    }


  }
